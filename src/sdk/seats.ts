/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customerPortalSeatsAssignSeat } from "../funcs/customerPortalSeatsAssignSeat.js";
import { customerPortalSeatsListClaimedSubscriptions } from "../funcs/customerPortalSeatsListClaimedSubscriptions.js";
import { customerPortalSeatsListSeats } from "../funcs/customerPortalSeatsListSeats.js";
import { customerPortalSeatsResendInvitation } from "../funcs/customerPortalSeatsResendInvitation.js";
import { customerPortalSeatsRevokeSeat } from "../funcs/customerPortalSeatsRevokeSeat.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CustomerSeat } from "../models/components/customerseat.js";
import { CustomerSubscription } from "../models/components/customersubscription.js";
import { SeatAssign } from "../models/components/seatassign.js";
import { SeatsList } from "../models/components/seatslist.js";
import { CustomerPortalSeatsAssignSeatSecurity } from "../models/operations/customerportalseatsassignseat.js";
import { CustomerPortalSeatsListClaimedSubscriptionsSecurity } from "../models/operations/customerportalseatslistclaimedsubscriptions.js";
import {
  CustomerPortalSeatsListSeatsRequest,
  CustomerPortalSeatsListSeatsSecurity,
} from "../models/operations/customerportalseatslistseats.js";
import {
  CustomerPortalSeatsResendInvitationRequest,
  CustomerPortalSeatsResendInvitationSecurity,
} from "../models/operations/customerportalseatsresendinvitation.js";
import {
  CustomerPortalSeatsRevokeSeatRequest,
  CustomerPortalSeatsRevokeSeatSecurity,
} from "../models/operations/customerportalseatsrevokeseat.js";
import { unwrapAsync } from "../types/fp.js";

export class Seats extends ClientSDK {
  /**
   * List Seats
   *
   * @remarks
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async listSeats(
    security: CustomerPortalSeatsListSeatsSecurity,
    request: CustomerPortalSeatsListSeatsRequest,
    options?: RequestOptions,
  ): Promise<SeatsList> {
    return unwrapAsync(customerPortalSeatsListSeats(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Assign Seat
   *
   * @remarks
   * **Scopes**: `customer_portal:write`
   */
  async assignSeat(
    security: CustomerPortalSeatsAssignSeatSecurity,
    request: SeatAssign,
    options?: RequestOptions,
  ): Promise<CustomerSeat> {
    return unwrapAsync(customerPortalSeatsAssignSeat(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Revoke Seat
   *
   * @remarks
   * **Scopes**: `customer_portal:write`
   */
  async revokeSeat(
    security: CustomerPortalSeatsRevokeSeatSecurity,
    request: CustomerPortalSeatsRevokeSeatRequest,
    options?: RequestOptions,
  ): Promise<CustomerSeat> {
    return unwrapAsync(customerPortalSeatsRevokeSeat(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Resend Invitation
   *
   * @remarks
   * **Scopes**: `customer_portal:write`
   */
  async resendInvitation(
    security: CustomerPortalSeatsResendInvitationSecurity,
    request: CustomerPortalSeatsResendInvitationRequest,
    options?: RequestOptions,
  ): Promise<CustomerSeat> {
    return unwrapAsync(customerPortalSeatsResendInvitation(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List Claimed Subscriptions
   *
   * @remarks
   * List all subscriptions where the authenticated customer has claimed a seat.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async listClaimedSubscriptions(
    security: CustomerPortalSeatsListClaimedSubscriptionsSecurity,
    options?: RequestOptions,
  ): Promise<Array<CustomerSubscription>> {
    return unwrapAsync(customerPortalSeatsListClaimedSubscriptions(
      this,
      security,
      options,
    ));
  }
}
