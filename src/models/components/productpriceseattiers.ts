/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductPriceSeatTier,
  ProductPriceSeatTier$inboundSchema,
  ProductPriceSeatTier$Outbound,
  ProductPriceSeatTier$outboundSchema,
} from "./productpriceseattier.js";

/**
 * List of pricing tiers for seat-based pricing.
 */
export type ProductPriceSeatTiers = {
  /**
   * List of pricing tiers
   */
  tiers: Array<ProductPriceSeatTier>;
};

/** @internal */
export const ProductPriceSeatTiers$inboundSchema: z.ZodType<
  ProductPriceSeatTiers,
  z.ZodTypeDef,
  unknown
> = z.object({
  tiers: z.array(ProductPriceSeatTier$inboundSchema),
});

/** @internal */
export type ProductPriceSeatTiers$Outbound = {
  tiers: Array<ProductPriceSeatTier$Outbound>;
};

/** @internal */
export const ProductPriceSeatTiers$outboundSchema: z.ZodType<
  ProductPriceSeatTiers$Outbound,
  z.ZodTypeDef,
  ProductPriceSeatTiers
> = z.object({
  tiers: z.array(ProductPriceSeatTier$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceSeatTiers$ {
  /** @deprecated use `ProductPriceSeatTiers$inboundSchema` instead. */
  export const inboundSchema = ProductPriceSeatTiers$inboundSchema;
  /** @deprecated use `ProductPriceSeatTiers$outboundSchema` instead. */
  export const outboundSchema = ProductPriceSeatTiers$outboundSchema;
  /** @deprecated use `ProductPriceSeatTiers$Outbound` instead. */
  export type Outbound = ProductPriceSeatTiers$Outbound;
}

export function productPriceSeatTiersToJSON(
  productPriceSeatTiers: ProductPriceSeatTiers,
): string {
  return JSON.stringify(
    ProductPriceSeatTiers$outboundSchema.parse(productPriceSeatTiers),
  );
}

export function productPriceSeatTiersFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceSeatTiers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceSeatTiers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceSeatTiers' from JSON`,
  );
}
