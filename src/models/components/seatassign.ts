/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SeatAssign = {
  /**
   * Subscription ID. Required if checkout_id is not provided.
   */
  subscriptionId?: string | null | undefined;
  /**
   * Checkout ID. Used to look up subscription. Required if subscription_id is not provided.
   */
  checkoutId?: string | null | undefined;
  /**
   * Email of the customer to assign the seat to
   */
  email?: string | null | undefined;
  /**
   * External customer ID for the seat assignment
   */
  externalCustomerId?: string | null | undefined;
  /**
   * Customer ID for the seat assignment
   */
  customerId?: string | null | undefined;
  /**
   * Additional metadata for the seat (max 10 keys, 1KB total)
   */
  metadata?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const SeatAssign$inboundSchema: z.ZodType<
  SeatAssign,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.nullable(z.string()).optional(),
  checkout_id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  external_customer_id: z.nullable(z.string()).optional(),
  customer_id: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "checkout_id": "checkoutId",
    "external_customer_id": "externalCustomerId",
    "customer_id": "customerId",
  });
});

/** @internal */
export type SeatAssign$Outbound = {
  subscription_id?: string | null | undefined;
  checkout_id?: string | null | undefined;
  email?: string | null | undefined;
  external_customer_id?: string | null | undefined;
  customer_id?: string | null | undefined;
  metadata?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const SeatAssign$outboundSchema: z.ZodType<
  SeatAssign$Outbound,
  z.ZodTypeDef,
  SeatAssign
> = z.object({
  subscriptionId: z.nullable(z.string()).optional(),
  checkoutId: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  externalCustomerId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    checkoutId: "checkout_id",
    externalCustomerId: "external_customer_id",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeatAssign$ {
  /** @deprecated use `SeatAssign$inboundSchema` instead. */
  export const inboundSchema = SeatAssign$inboundSchema;
  /** @deprecated use `SeatAssign$outboundSchema` instead. */
  export const outboundSchema = SeatAssign$outboundSchema;
  /** @deprecated use `SeatAssign$Outbound` instead. */
  export type Outbound = SeatAssign$Outbound;
}

export function seatAssignToJSON(seatAssign: SeatAssign): string {
  return JSON.stringify(SeatAssign$outboundSchema.parse(seatAssign));
}

export function seatAssignFromJSON(
  jsonString: string,
): SafeParseResult<SeatAssign, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeatAssign$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeatAssign' from JSON`,
  );
}
