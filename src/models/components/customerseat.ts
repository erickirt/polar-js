/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SeatStatus,
  SeatStatus$inboundSchema,
  SeatStatus$outboundSchema,
} from "./seatstatus.js";

export type CustomerSeat = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The seat ID
   */
  id: string;
  /**
   * The subscription ID (for recurring seats)
   */
  subscriptionId?: string | null | undefined;
  /**
   * The order ID (for one-time purchase seats)
   */
  orderId?: string | null | undefined;
  status: SeatStatus;
  /**
   * The assigned customer ID
   */
  customerId?: string | null | undefined;
  /**
   * The assigned customer email
   */
  customerEmail?: string | null | undefined;
  /**
   * When the invitation token expires
   */
  invitationTokenExpiresAt?: Date | null | undefined;
  /**
   * When the seat was claimed
   */
  claimedAt?: Date | null | undefined;
  /**
   * When the seat was revoked
   */
  revokedAt?: Date | null | undefined;
  /**
   * Additional metadata for the seat
   */
  seatMetadata?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const CustomerSeat$inboundSchema: z.ZodType<
  CustomerSeat,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  order_id: z.nullable(z.string()).optional(),
  status: SeatStatus$inboundSchema,
  customer_id: z.nullable(z.string()).optional(),
  customer_email: z.nullable(z.string()).optional(),
  invitation_token_expires_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  claimed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  revoked_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  seat_metadata: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "subscription_id": "subscriptionId",
    "order_id": "orderId",
    "customer_id": "customerId",
    "customer_email": "customerEmail",
    "invitation_token_expires_at": "invitationTokenExpiresAt",
    "claimed_at": "claimedAt",
    "revoked_at": "revokedAt",
    "seat_metadata": "seatMetadata",
  });
});

/** @internal */
export type CustomerSeat$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  subscription_id?: string | null | undefined;
  order_id?: string | null | undefined;
  status: string;
  customer_id?: string | null | undefined;
  customer_email?: string | null | undefined;
  invitation_token_expires_at?: string | null | undefined;
  claimed_at?: string | null | undefined;
  revoked_at?: string | null | undefined;
  seat_metadata?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const CustomerSeat$outboundSchema: z.ZodType<
  CustomerSeat$Outbound,
  z.ZodTypeDef,
  CustomerSeat
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: SeatStatus$outboundSchema,
  customerId: z.nullable(z.string()).optional(),
  customerEmail: z.nullable(z.string()).optional(),
  invitationTokenExpiresAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  claimedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  revokedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  seatMetadata: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    subscriptionId: "subscription_id",
    orderId: "order_id",
    customerId: "customer_id",
    customerEmail: "customer_email",
    invitationTokenExpiresAt: "invitation_token_expires_at",
    claimedAt: "claimed_at",
    revokedAt: "revoked_at",
    seatMetadata: "seat_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSeat$ {
  /** @deprecated use `CustomerSeat$inboundSchema` instead. */
  export const inboundSchema = CustomerSeat$inboundSchema;
  /** @deprecated use `CustomerSeat$outboundSchema` instead. */
  export const outboundSchema = CustomerSeat$outboundSchema;
  /** @deprecated use `CustomerSeat$Outbound` instead. */
  export type Outbound = CustomerSeat$Outbound;
}

export function customerSeatToJSON(customerSeat: CustomerSeat): string {
  return JSON.stringify(CustomerSeat$outboundSchema.parse(customerSeat));
}

export function customerSeatFromJSON(
  jsonString: string,
): SafeParseResult<CustomerSeat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerSeat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerSeat' from JSON`,
  );
}
