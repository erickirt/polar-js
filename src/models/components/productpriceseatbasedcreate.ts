/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema to create a seat-based price.
 */
export type ProductPriceSeatBasedCreate = {
  amountType: "seat_based";
  /**
   * The currency. Currently, only `usd` is supported.
   */
  priceCurrency?: string | undefined;
  /**
   * The price per seat in cents.
   */
  pricePerSeat: number;
};

/** @internal */
export const ProductPriceSeatBasedCreate$inboundSchema: z.ZodType<
  ProductPriceSeatBasedCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount_type: z.literal("seat_based"),
  price_currency: z.string().default("usd"),
  price_per_seat: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "amount_type": "amountType",
    "price_currency": "priceCurrency",
    "price_per_seat": "pricePerSeat",
  });
});

/** @internal */
export type ProductPriceSeatBasedCreate$Outbound = {
  amount_type: "seat_based";
  price_currency: string;
  price_per_seat: number;
};

/** @internal */
export const ProductPriceSeatBasedCreate$outboundSchema: z.ZodType<
  ProductPriceSeatBasedCreate$Outbound,
  z.ZodTypeDef,
  ProductPriceSeatBasedCreate
> = z.object({
  amountType: z.literal("seat_based"),
  priceCurrency: z.string().default("usd"),
  pricePerSeat: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    amountType: "amount_type",
    priceCurrency: "price_currency",
    pricePerSeat: "price_per_seat",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceSeatBasedCreate$ {
  /** @deprecated use `ProductPriceSeatBasedCreate$inboundSchema` instead. */
  export const inboundSchema = ProductPriceSeatBasedCreate$inboundSchema;
  /** @deprecated use `ProductPriceSeatBasedCreate$outboundSchema` instead. */
  export const outboundSchema = ProductPriceSeatBasedCreate$outboundSchema;
  /** @deprecated use `ProductPriceSeatBasedCreate$Outbound` instead. */
  export type Outbound = ProductPriceSeatBasedCreate$Outbound;
}

export function productPriceSeatBasedCreateToJSON(
  productPriceSeatBasedCreate: ProductPriceSeatBasedCreate,
): string {
  return JSON.stringify(
    ProductPriceSeatBasedCreate$outboundSchema.parse(
      productPriceSeatBasedCreate,
    ),
  );
}

export function productPriceSeatBasedCreateFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceSeatBasedCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceSeatBasedCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceSeatBasedCreate' from JSON`,
  );
}
