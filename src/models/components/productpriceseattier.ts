/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A pricing tier for seat-based pricing.
 */
export type ProductPriceSeatTier = {
  /**
   * Minimum number of seats (inclusive)
   */
  minSeats: number;
  /**
   * Maximum number of seats (inclusive). None for unlimited.
   */
  maxSeats?: number | null | undefined;
  /**
   * Price per seat in cents for this tier
   */
  pricePerSeat: number;
};

/** @internal */
export const ProductPriceSeatTier$inboundSchema: z.ZodType<
  ProductPriceSeatTier,
  z.ZodTypeDef,
  unknown
> = z.object({
  min_seats: z.number().int(),
  max_seats: z.nullable(z.number().int()).optional(),
  price_per_seat: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "min_seats": "minSeats",
    "max_seats": "maxSeats",
    "price_per_seat": "pricePerSeat",
  });
});

/** @internal */
export type ProductPriceSeatTier$Outbound = {
  min_seats: number;
  max_seats?: number | null | undefined;
  price_per_seat: number;
};

/** @internal */
export const ProductPriceSeatTier$outboundSchema: z.ZodType<
  ProductPriceSeatTier$Outbound,
  z.ZodTypeDef,
  ProductPriceSeatTier
> = z.object({
  minSeats: z.number().int(),
  maxSeats: z.nullable(z.number().int()).optional(),
  pricePerSeat: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    minSeats: "min_seats",
    maxSeats: "max_seats",
    pricePerSeat: "price_per_seat",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceSeatTier$ {
  /** @deprecated use `ProductPriceSeatTier$inboundSchema` instead. */
  export const inboundSchema = ProductPriceSeatTier$inboundSchema;
  /** @deprecated use `ProductPriceSeatTier$outboundSchema` instead. */
  export const outboundSchema = ProductPriceSeatTier$outboundSchema;
  /** @deprecated use `ProductPriceSeatTier$Outbound` instead. */
  export type Outbound = ProductPriceSeatTier$Outbound;
}

export function productPriceSeatTierToJSON(
  productPriceSeatTier: ProductPriceSeatTier,
): string {
  return JSON.stringify(
    ProductPriceSeatTier$outboundSchema.parse(productPriceSeatTier),
  );
}

export function productPriceSeatTierFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceSeatTier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceSeatTier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceSeatTier' from JSON`,
  );
}
