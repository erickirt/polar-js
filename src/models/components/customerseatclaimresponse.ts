/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerSeat,
  CustomerSeat$inboundSchema,
  CustomerSeat$Outbound,
  CustomerSeat$outboundSchema,
} from "./customerseat.js";

/**
 * Response after successfully claiming a seat.
 */
export type CustomerSeatClaimResponse = {
  seat: CustomerSeat;
  /**
   * Session token for immediate customer portal access
   */
  customerSessionToken: string;
};

/** @internal */
export const CustomerSeatClaimResponse$inboundSchema: z.ZodType<
  CustomerSeatClaimResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  seat: CustomerSeat$inboundSchema,
  customer_session_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session_token": "customerSessionToken",
  });
});

/** @internal */
export type CustomerSeatClaimResponse$Outbound = {
  seat: CustomerSeat$Outbound;
  customer_session_token: string;
};

/** @internal */
export const CustomerSeatClaimResponse$outboundSchema: z.ZodType<
  CustomerSeatClaimResponse$Outbound,
  z.ZodTypeDef,
  CustomerSeatClaimResponse
> = z.object({
  seat: CustomerSeat$outboundSchema,
  customerSessionToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSessionToken: "customer_session_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSeatClaimResponse$ {
  /** @deprecated use `CustomerSeatClaimResponse$inboundSchema` instead. */
  export const inboundSchema = CustomerSeatClaimResponse$inboundSchema;
  /** @deprecated use `CustomerSeatClaimResponse$outboundSchema` instead. */
  export const outboundSchema = CustomerSeatClaimResponse$outboundSchema;
  /** @deprecated use `CustomerSeatClaimResponse$Outbound` instead. */
  export type Outbound = CustomerSeatClaimResponse$Outbound;
}

export function customerSeatClaimResponseToJSON(
  customerSeatClaimResponse: CustomerSeatClaimResponse,
): string {
  return JSON.stringify(
    CustomerSeatClaimResponse$outboundSchema.parse(customerSeatClaimResponse),
  );
}

export function customerSeatClaimResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomerSeatClaimResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerSeatClaimResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerSeatClaimResponse' from JSON`,
  );
}
