/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Read-only information about a seat claim invitation.
 *
 * @remarks
 * Safe for email scanners - no side effects when fetched.
 */
export type SeatClaimInfo = {
  /**
   * Name of the product
   */
  productName: string;
  /**
   * ID of the product
   */
  productId: string;
  /**
   * Name of the organization
   */
  organizationName: string;
  /**
   * Slug of the organization
   */
  organizationSlug: string;
  /**
   * Email of the customer assigned to this seat
   */
  customerEmail: string;
  /**
   * Whether the seat can be claimed
   */
  canClaim: boolean;
};

/** @internal */
export const SeatClaimInfo$inboundSchema: z.ZodType<
  SeatClaimInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_name: z.string(),
  product_id: z.string(),
  organization_name: z.string(),
  organization_slug: z.string(),
  customer_email: z.string(),
  can_claim: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "product_name": "productName",
    "product_id": "productId",
    "organization_name": "organizationName",
    "organization_slug": "organizationSlug",
    "customer_email": "customerEmail",
    "can_claim": "canClaim",
  });
});

/** @internal */
export type SeatClaimInfo$Outbound = {
  product_name: string;
  product_id: string;
  organization_name: string;
  organization_slug: string;
  customer_email: string;
  can_claim: boolean;
};

/** @internal */
export const SeatClaimInfo$outboundSchema: z.ZodType<
  SeatClaimInfo$Outbound,
  z.ZodTypeDef,
  SeatClaimInfo
> = z.object({
  productName: z.string(),
  productId: z.string(),
  organizationName: z.string(),
  organizationSlug: z.string(),
  customerEmail: z.string(),
  canClaim: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    productName: "product_name",
    productId: "product_id",
    organizationName: "organization_name",
    organizationSlug: "organization_slug",
    customerEmail: "customer_email",
    canClaim: "can_claim",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeatClaimInfo$ {
  /** @deprecated use `SeatClaimInfo$inboundSchema` instead. */
  export const inboundSchema = SeatClaimInfo$inboundSchema;
  /** @deprecated use `SeatClaimInfo$outboundSchema` instead. */
  export const outboundSchema = SeatClaimInfo$outboundSchema;
  /** @deprecated use `SeatClaimInfo$Outbound` instead. */
  export type Outbound = SeatClaimInfo$Outbound;
}

export function seatClaimInfoToJSON(seatClaimInfo: SeatClaimInfo): string {
  return JSON.stringify(SeatClaimInfo$outboundSchema.parse(seatClaimInfo));
}

export function seatClaimInfoFromJSON(
  jsonString: string,
): SafeParseResult<SeatClaimInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeatClaimInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeatClaimInfo' from JSON`,
  );
}
