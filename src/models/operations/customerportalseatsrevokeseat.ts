/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalSeatsRevokeSeatSecurity = {
  customerSession: string;
};

export type CustomerPortalSeatsRevokeSeatRequest = {
  seatId: string;
};

/** @internal */
export const CustomerPortalSeatsRevokeSeatSecurity$inboundSchema: z.ZodType<
  CustomerPortalSeatsRevokeSeatSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalSeatsRevokeSeatSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalSeatsRevokeSeatSecurity$outboundSchema: z.ZodType<
  CustomerPortalSeatsRevokeSeatSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalSeatsRevokeSeatSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSeatsRevokeSeatSecurity$ {
  /** @deprecated use `CustomerPortalSeatsRevokeSeatSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSeatsRevokeSeatSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalSeatsRevokeSeatSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSeatsRevokeSeatSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalSeatsRevokeSeatSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalSeatsRevokeSeatSecurity$Outbound;
}

export function customerPortalSeatsRevokeSeatSecurityToJSON(
  customerPortalSeatsRevokeSeatSecurity: CustomerPortalSeatsRevokeSeatSecurity,
): string {
  return JSON.stringify(
    CustomerPortalSeatsRevokeSeatSecurity$outboundSchema.parse(
      customerPortalSeatsRevokeSeatSecurity,
    ),
  );
}

export function customerPortalSeatsRevokeSeatSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalSeatsRevokeSeatSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSeatsRevokeSeatSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalSeatsRevokeSeatSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalSeatsRevokeSeatRequest$inboundSchema: z.ZodType<
  CustomerPortalSeatsRevokeSeatRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  seat_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "seat_id": "seatId",
  });
});

/** @internal */
export type CustomerPortalSeatsRevokeSeatRequest$Outbound = {
  seat_id: string;
};

/** @internal */
export const CustomerPortalSeatsRevokeSeatRequest$outboundSchema: z.ZodType<
  CustomerPortalSeatsRevokeSeatRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalSeatsRevokeSeatRequest
> = z.object({
  seatId: z.string(),
}).transform((v) => {
  return remap$(v, {
    seatId: "seat_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSeatsRevokeSeatRequest$ {
  /** @deprecated use `CustomerPortalSeatsRevokeSeatRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSeatsRevokeSeatRequest$inboundSchema;
  /** @deprecated use `CustomerPortalSeatsRevokeSeatRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSeatsRevokeSeatRequest$outboundSchema;
  /** @deprecated use `CustomerPortalSeatsRevokeSeatRequest$Outbound` instead. */
  export type Outbound = CustomerPortalSeatsRevokeSeatRequest$Outbound;
}

export function customerPortalSeatsRevokeSeatRequestToJSON(
  customerPortalSeatsRevokeSeatRequest: CustomerPortalSeatsRevokeSeatRequest,
): string {
  return JSON.stringify(
    CustomerPortalSeatsRevokeSeatRequest$outboundSchema.parse(
      customerPortalSeatsRevokeSeatRequest,
    ),
  );
}

export function customerPortalSeatsRevokeSeatRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalSeatsRevokeSeatRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSeatsRevokeSeatRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalSeatsRevokeSeatRequest' from JSON`,
  );
}
