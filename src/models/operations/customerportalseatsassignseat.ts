/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalSeatsAssignSeatSecurity = {
  customerSession: string;
};

/** @internal */
export const CustomerPortalSeatsAssignSeatSecurity$inboundSchema: z.ZodType<
  CustomerPortalSeatsAssignSeatSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalSeatsAssignSeatSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalSeatsAssignSeatSecurity$outboundSchema: z.ZodType<
  CustomerPortalSeatsAssignSeatSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalSeatsAssignSeatSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSeatsAssignSeatSecurity$ {
  /** @deprecated use `CustomerPortalSeatsAssignSeatSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSeatsAssignSeatSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalSeatsAssignSeatSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSeatsAssignSeatSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalSeatsAssignSeatSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalSeatsAssignSeatSecurity$Outbound;
}

export function customerPortalSeatsAssignSeatSecurityToJSON(
  customerPortalSeatsAssignSeatSecurity: CustomerPortalSeatsAssignSeatSecurity,
): string {
  return JSON.stringify(
    CustomerPortalSeatsAssignSeatSecurity$outboundSchema.parse(
      customerPortalSeatsAssignSeatSecurity,
    ),
  );
}

export function customerPortalSeatsAssignSeatSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalSeatsAssignSeatSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSeatsAssignSeatSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalSeatsAssignSeatSecurity' from JSON`,
  );
}
