/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerSeatsListSeatsRequest = {
  subscriptionId?: string | null | undefined;
  orderId?: string | null | undefined;
};

/** @internal */
export const CustomerSeatsListSeatsRequest$inboundSchema: z.ZodType<
  CustomerSeatsListSeatsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.nullable(z.string()).optional(),
  order_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "order_id": "orderId",
  });
});

/** @internal */
export type CustomerSeatsListSeatsRequest$Outbound = {
  subscription_id?: string | null | undefined;
  order_id?: string | null | undefined;
};

/** @internal */
export const CustomerSeatsListSeatsRequest$outboundSchema: z.ZodType<
  CustomerSeatsListSeatsRequest$Outbound,
  z.ZodTypeDef,
  CustomerSeatsListSeatsRequest
> = z.object({
  subscriptionId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSeatsListSeatsRequest$ {
  /** @deprecated use `CustomerSeatsListSeatsRequest$inboundSchema` instead. */
  export const inboundSchema = CustomerSeatsListSeatsRequest$inboundSchema;
  /** @deprecated use `CustomerSeatsListSeatsRequest$outboundSchema` instead. */
  export const outboundSchema = CustomerSeatsListSeatsRequest$outboundSchema;
  /** @deprecated use `CustomerSeatsListSeatsRequest$Outbound` instead. */
  export type Outbound = CustomerSeatsListSeatsRequest$Outbound;
}

export function customerSeatsListSeatsRequestToJSON(
  customerSeatsListSeatsRequest: CustomerSeatsListSeatsRequest,
): string {
  return JSON.stringify(
    CustomerSeatsListSeatsRequest$outboundSchema.parse(
      customerSeatsListSeatsRequest,
    ),
  );
}

export function customerSeatsListSeatsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerSeatsListSeatsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerSeatsListSeatsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerSeatsListSeatsRequest' from JSON`,
  );
}
