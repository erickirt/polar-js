/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalSeatsListSeatsSecurity = {
  customerSession: string;
};

export type CustomerPortalSeatsListSeatsRequest = {
  /**
   * Subscription ID
   */
  subscriptionId?: string | null | undefined;
  /**
   * Order ID
   */
  orderId?: string | null | undefined;
};

/** @internal */
export const CustomerPortalSeatsListSeatsSecurity$inboundSchema: z.ZodType<
  CustomerPortalSeatsListSeatsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalSeatsListSeatsSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalSeatsListSeatsSecurity$outboundSchema: z.ZodType<
  CustomerPortalSeatsListSeatsSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalSeatsListSeatsSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSeatsListSeatsSecurity$ {
  /** @deprecated use `CustomerPortalSeatsListSeatsSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSeatsListSeatsSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalSeatsListSeatsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSeatsListSeatsSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalSeatsListSeatsSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalSeatsListSeatsSecurity$Outbound;
}

export function customerPortalSeatsListSeatsSecurityToJSON(
  customerPortalSeatsListSeatsSecurity: CustomerPortalSeatsListSeatsSecurity,
): string {
  return JSON.stringify(
    CustomerPortalSeatsListSeatsSecurity$outboundSchema.parse(
      customerPortalSeatsListSeatsSecurity,
    ),
  );
}

export function customerPortalSeatsListSeatsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalSeatsListSeatsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSeatsListSeatsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalSeatsListSeatsSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalSeatsListSeatsRequest$inboundSchema: z.ZodType<
  CustomerPortalSeatsListSeatsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.nullable(z.string()).optional(),
  order_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "order_id": "orderId",
  });
});

/** @internal */
export type CustomerPortalSeatsListSeatsRequest$Outbound = {
  subscription_id?: string | null | undefined;
  order_id?: string | null | undefined;
};

/** @internal */
export const CustomerPortalSeatsListSeatsRequest$outboundSchema: z.ZodType<
  CustomerPortalSeatsListSeatsRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalSeatsListSeatsRequest
> = z.object({
  subscriptionId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSeatsListSeatsRequest$ {
  /** @deprecated use `CustomerPortalSeatsListSeatsRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSeatsListSeatsRequest$inboundSchema;
  /** @deprecated use `CustomerPortalSeatsListSeatsRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSeatsListSeatsRequest$outboundSchema;
  /** @deprecated use `CustomerPortalSeatsListSeatsRequest$Outbound` instead. */
  export type Outbound = CustomerPortalSeatsListSeatsRequest$Outbound;
}

export function customerPortalSeatsListSeatsRequestToJSON(
  customerPortalSeatsListSeatsRequest: CustomerPortalSeatsListSeatsRequest,
): string {
  return JSON.stringify(
    CustomerPortalSeatsListSeatsRequest$outboundSchema.parse(
      customerPortalSeatsListSeatsRequest,
    ),
  );
}

export function customerPortalSeatsListSeatsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalSeatsListSeatsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSeatsListSeatsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalSeatsListSeatsRequest' from JSON`,
  );
}
